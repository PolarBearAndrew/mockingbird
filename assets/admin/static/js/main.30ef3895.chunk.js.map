{"version":3,"sources":["components/comm/Menu.tsx","const/menu.ts","config.ts","utils/socket.ts","const/color.ts","logo.svg","components/comm/NavBar.tsx","components/comm/Typing.tsx","pages/DocumentPage.tsx","components/comm/PageHeader.tsx","utils/notify.ts","components/mockers/MockerForm.tsx","const/envoy.ts","components/comm/HttpStatusCode.tsx","components/comm/JSONBeautify.tsx","store/mockers.ts","api/mockers.ts","components/mockers/MockerItem.tsx","store/proxies.ts","components/mockers/MockerList.tsx","api/proxies.ts","components/proxies/ProxyItem.tsx","components/proxies/ProxyList.tsx","pages/ProxyAndMockersPage.tsx","App.tsx","index.tsx"],"names":["ConnStatus","MENU","path","title","config","socket","window","io","socketCtx","createContext","BASE_BLUE","BASE_PINK","LIGHT_GRAY","CODE_GRAY","FRONT_WHITE","FRONT_SUCCESS","FRONT_WARNING","FRONT_ERROR","initConnStatus","mockingbird","unknown","envoy","renderStatus","s","serviceName","alive","placement","StatusItem","width","percent","showInfo","steps","size","strokeColor","CheckCircleOutlined","style","color","ServiceName","disconnect","CloseCircleOutlined","QuestionCircleOutlined","MenuList","Item","Menu","useContext","useState","socketState","setSocketState","socketCb","useCallback","on","useEffect","height","defaultSelectedKeys","mode","map","item","i","exact","to","StatusFooter","styled","table","tr","td","NavBar","Header","Layout","display","alignItems","justifyContent","padding","AppLogo","src","Logo","alt","AppName","img","h1","Container","div","BlinkCursor","span","p","blink","Typing","props","idx","text","direction","showing","setShowing","list","sentenceDelay","typingDelay","sentenceShowTime","backspaceDelay","render","length","setTimeout","substring","BannerContainer","LogoImg","AppTitle","Slogan","StartBtn","HomePage","backgroundColor","marginRight","ghost","PageHeader","Title","Typography","margin","notifier","reduce","m","key","msg","desc","type","message","description","notification","duration","Option","Select","getSubmitText","action","Error","MockerForm","Text","data","setData","setDataByKey","val","id","onClose","visible","bodyStyle","paddingBottom","footer","textAlign","createBy","onClick","onComplete","layout","hideRequiredMark","gutter","name","label","initialValue","reqMethod","rules","required","placeholder","onChange","value","resStatus","e","parseInt","target","error","warning","prefix","addonBefore","resBody","TextArea","rows","checkedChildren","unCheckedChildren","checked","status","defaultChecked","HttpStatusCode","code","tag","Math","floor","MockersActionType","JSONBeautifier","fontSize","theme","main","string","boolean","jsonStr","listMockers","a","axios","get","res","console","mockers","updateMocker","put","omit","createMocker","post","JSON","stringify","deleteMocker","delete","mockersReducerInit","mockersReducer","origin","RefreshList","Array","isArray","payload","UpdateMocker","AddMocker","RemoveMocker","filter","ProxiesActionType","MockerTagWrapper","MockerTag","MockerItemResBody","MockerItem","dispatch","mocker","mockerDispatcher","toggleMockersAction","nextStatus","success","mockerStatus","strong","LoadingOutlined","spin","hoverable","bordered","extra","marginBottom","opacity","actions","DeleteOutlined","onDeleteBtnClick","EditOutlined","onEditBtnClick","split","str","MockerList","listProxies","proxies","proxiesReducerInit","proxiesReducer","UpdateProxy","AddProxy","RemoveProxy","ProxyTagWrapper","ProxyTag","ProxyItem","proxy","proxyStatus","disabled","ProxyList","DefaultMocker","ControlPanel","ProxyAndMockersPage","useReducer","proxyDispatcher","listLoading","setListLoading","refreshProxyAction","refreshMockerAction","genRefreshMockersAction","genCreateMockersAction","genUpdateMockersAction","mockerId","genDeleteMockersAction","mockerFormState","setMockerFormState","shape","icon","PlusOutlined","loading","RedoOutlined","orientation","find","App","Sider","Content","Footer","className","ReactDOM","document","getElementById"],"mappings":"uKASKA,E,oICDQC,EAAgB,CAC3B,CACEC,KAAM,gBACNC,MAAO,mBAET,CACED,KAAM,cACNC,MAAO,cCdEC,EACL,wBADKA,EAEC,yBCCRC,EAAUC,OAAeC,GAAGH,GAErBI,EAAYC,wBAAcJ,GCL1BK,EAAY,UAEZC,EAAY,UAEZC,EAAa,UAEbC,EAAY,UAEZC,EAAc,QAEdC,EAAgB,UAEhBC,EAAgB,SAEhBC,EAAc,U,yVJNtBjB,K,cAAAA,E,wBAAAA,E,mBAAAA,M,KAWL,IAAMkB,EAAiB,CACrBC,YAAanB,EAAWoB,QACxBC,MAAOrB,EAAWoB,SAGpB,SAASE,EAAaC,EAAeC,GACnC,OAAQD,GACN,KAAKvB,EAAWyB,MACd,OACE,cAAC,IAAD,CAASC,UAAU,MAAMvB,MAAM,YAA/B,SACE,eAACwB,EAAD,WACE,oBAAIC,MAAO,GAAX,SACE,cAAC,IAAD,CAAUC,QAAS,IAAKC,UAAU,EAAOC,MAAO,EAAGC,KAAK,QAAQC,YAAalB,MAE/E,oBAAIa,MAAO,GAAX,SACE,cAACM,EAAA,EAAD,CAAqBC,MAAO,CAAEC,MAAOrB,OAEvC,cAACsB,EAAD,UAAcb,SAItB,KAAKxB,EAAWsC,WACd,OACE,cAAC,IAAD,CAASZ,UAAU,MAAMvB,MAAM,gBAA/B,SACE,eAACwB,EAAD,WACE,6BACE,cAAC,IAAD,CAAUE,QAAS,GAAIC,UAAU,EAAOC,MAAO,EAAGC,KAAK,QAAQC,YAAahB,MAE9E,6BACE,cAACsB,EAAA,EAAD,CAAqBJ,MAAO,CAAEC,MAAOnB,OAEvC,cAACoB,EAAD,UAAcb,SAItB,KAAKxB,EAAWoB,QAChB,QACE,OACE,cAAC,IAAD,CAASM,UAAU,MAAMvB,MAAM,kBAA/B,SACE,eAACwB,EAAD,WACE,6BACE,cAAC,IAAD,CAAUE,QAAS,GAAIC,UAAU,EAAOC,MAAO,EAAGC,KAAK,QAAQC,YAAajB,MAE9E,6BACE,cAACwB,EAAA,EAAD,CAAwBL,MAAO,CAAEC,MAAOpB,OAE1C,cAACqB,EAAD,UAAcb,UAOX,SAASiB,IAAY,IAC1BC,EAASC,IAATD,KACFrC,EAASuC,qBAAWpC,GAFO,EAGKqC,mBAAwB3B,GAH7B,mBAG1B4B,EAH0B,KAGbC,EAHa,KAI3BC,EAAWC,uBAAY,WAC3B5C,EAAO6C,GAAG,WAAW,WACnBH,EAAe,CACb5B,YAAanB,EAAWyB,MACxBJ,MAAOrB,EAAWoB,aAGtBf,EAAO6C,GAAG,cAAc,WACtBH,EAAe,CACb5B,YAAanB,EAAWsC,WACxBjB,MAAOrB,EAAWoB,eAGrB,CAACf,IAIJ,OAFA8C,qBAAU,WAAQH,OAGhB,eAAC,IAAD,CACEb,MAAO,CAAEP,MAAO,IAAKwB,OAAQ,QAC7BC,oBAAqB,CAACpD,EAAK,GAAGC,MAC9BoD,KAAK,SAHP,UAIGrD,EAAKsD,KAAI,SAACC,EAAMC,GAAP,OACR,cAACf,EAAD,CAAsBvC,MAAOqD,EAAKrD,MAAlC,SACE,cAAC,IAAD,CAAiBuD,OAAK,EAACC,GAAIH,EAAKtD,KAAhC,SACGsD,EAAKrD,OADMsD,IADLD,EAAKtD,SAOlB,eAAC0D,EAAD,WACGtC,EAAawB,EAAY3B,YAAa,uBACtCG,EAAawB,EAAYzB,MAAO,qBAMzC,IAAMuC,EAAeC,IAAOC,MAAV,KAOZnC,EAAakC,IAAOE,GAAV,KAIV1B,EAAcwB,IAAOG,GAAV,KK9HF,MAA0B,iC,6NCO1B,SAASC,IAAU,IACxBC,EAAWC,IAAXD,OACR,OACE,eAACA,EAAD,CAAQ/B,MAAO,CACbiC,QAAS,OACTC,WAAY,SACZC,eAAgB,OAChBC,QAAS,UAJX,UAME,cAAC,IAAD,CAASZ,GAAG,SAAZ,SACE,cAACa,EAAD,CAASC,IAAKC,EAAMC,IAAI,OAE1B,cAAC,IAAD,CAAShB,GAAG,SAAZ,SACE,cAACiB,EAAD,iCAMR,IAAMJ,EAAUX,IAAOgB,IAAV,KAKPD,EAAUf,IAAOiB,GAAV,IAEFhE,G,mRC0CX,IAAMiE,EAAYlB,IAAOmB,IAAV,KAKTC,EAAcpB,IAAOqB,KAAV,KACF,SAACC,GAAD,OAAOA,EAAEC,MAAQ,kCAAoC,UAMrDC,EA5Ef,SAAgBC,GAAe,IAAD,EAEEzC,mBAAS,CAAE0C,IAAK,EAAGC,KAAM,GAAIC,UAAW,IAF1C,mBAErBC,EAFqB,KAEZC,EAFY,KAI1BC,EAKEN,EALFM,KACAC,EAIEP,EAJFO,cACAC,EAGER,EAHFQ,YACAC,EAEET,EAFFS,iBACAC,EACEV,EADFU,eAGIC,EAAShD,uBAAY,YACE,IAAvByC,EAAQD,WAA4C,IAAxBC,EAAQF,KAAKU,OAazCR,EAAQF,KAAKU,SAAWN,EAAKF,EAAQH,KAAKW,OAW9CC,YAAW,WACTR,EAAW,CACTJ,IAAKG,EAAQH,IACbE,UAAWC,EAAQD,UACnBD,KAAMI,EAAKF,EAAQH,KAAKa,UAAU,EAAGV,EAAQF,KAAKU,OAASR,EAAQD,eAE9C,IAAtBC,EAAQD,UAAkBK,EAAcE,GAhBzCG,YAAW,WACTR,EAAW,CACTJ,IAAKG,EAAQH,IACbE,WAAY,EACZD,KAAMI,EAAKF,EAAQH,KAAKa,UAAU,EAAGV,EAAQF,KAAKU,OAAS,OAE5DH,GAnBHI,YAAW,WACTR,EAAW,CACTF,UAAW,EACXD,KAAM,GACND,IAAMG,EAAQH,IAAOK,EAAKM,OAAS,EAC/BR,EAAQH,IAAM,EACd,MAELM,KAsBJ,CACDD,EACAC,EACAC,EACAC,EACAC,EACAN,EAAQD,UACRC,EAAQH,IACRG,EAAQF,KAAKU,SAKf,OAFA/C,qBAAU,WAAQgD,WAAWF,EAAQ,KAAM,CAACA,IAG1C,eAAClB,EAAD,WACGW,EAAQF,KACT,cAACP,EAAD,CAAaG,MAAOM,EAAQF,KAAKU,SAAWZ,EAAMM,KAAKF,EAAQH,KAAKW,OAApE,mB,u2BC3BN,IAAMG,GAAkBxC,IAAOmB,IAAV,KAMVlE,EAOWJ,EAEEA,GAIlB4F,GAAUzC,IAAOgB,IAAV,MAMP0B,GAAW1C,IAAOmB,IAAV,MAIRwB,GAAS3C,IAAOmB,IAAV,MAQNyB,GAAW5C,IAAOmB,IAAV,MAKC0B,GA7Ef,WACE,OACE,eAACL,GAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAOnC,OAAR,CAAe/B,MAAO,CAAEwE,gBAAiBhG,OAE3C,cAAC2F,GAAD,CAAS7B,IAAKC,EAAMC,IAAI,KACxB,cAAC4B,GAAD,0BACA,eAACC,GAAD,WACE,sBAAMrE,MAAO,CAAEC,MAAOzB,EAAWiG,YAAa,IAA9C,yBACA,sBAAMzE,MAAO,CAAEyE,YAAa,IAA5B,kBACA,8BACE,cAAC,EAAD,CACEd,YAAa,GACbE,eAAgB,GAChBD,iBAAkB,IAClBF,cAAe,IACfD,KAAM,CACJ,cACA,mBACA,cACA,iBACA,yBAIR,cAAC,IAAD,CAASjC,GAAG,gBAAZ,SACE,cAAC8C,GAAD,UACE,cAAC,IAAD,CAAQI,OAAK,EAAC7E,KAAK,QAAnB,+B,gGCrBK8E,OAZf,SAAoBxB,GAClB,IAAKA,EAAMnF,MACT,OAAO,KAFmC,IAIpC4G,EAAUC,KAAVD,MACR,OACE,cAACA,EAAD,CAAO5E,MAAO,CAAE8E,OAAQ,iBAAxB,SACG3B,EAAMnF,S,oECUA+G,GALI,CAAC,UAAW,OAAQ,QAAS,WAAWC,QAAO,SAACC,EAAGC,GAElE,OADAD,EAAEC,GAAO,SAACC,EAAaC,GAAd,OAHaC,EAGkCH,EAHlBI,EAGmCH,EAHlBI,EAGuBH,EAHCI,KAAaH,GAAM,CAAEC,UAASC,cAAaE,SAAU,KAA/G,IAACJ,EAAgBC,EAAiBC,GAIhDN,IACN,ICZKS,GAAWC,KAAXD,OAUR,SAASE,GAAcC,GACrB,OAAQA,GACN,IAAK,WACH,MAAO,SACT,IAAK,WACH,MAAO,OACT,QACE,MAAM,IAAIC,MAAM,mBAIP,SAASC,GAAW5C,GAAe,IACxC6C,EAASnB,KAATmB,KADuC,EAEvBtF,mBAAkByC,EAAM8C,MAFD,mBAExCA,EAFwC,KAElCC,EAFkC,KAGzCC,EAAe,SAACjB,GAAD,OAAwB,SAACkB,GAAD,OAAcF,EAAQ,6BAAKD,GAAN,mBAAaf,EAAMkB,OAErF,OACE,cAAC,KAAD,CACEpI,MAAwB,aAAjBmF,EAAM0C,OACT,+BADG,wBAEc1C,EAAM8C,KAAKI,IAChC5G,MAAO,IACP6G,QAASnD,EAAMmD,QACfC,QAASpD,EAAMoD,QACfC,UAAW,CAAEC,cAAe,IAC5BC,OACE,sBAAK1G,MAAO,CAAE2G,UAAW,SAAzB,UACE,eAACX,EAAD,CAAMX,KAAK,YAAYrF,MAAO,CAAEyE,YAAa,GAA7C,4BAAkEtB,EAAM8C,KAAKW,UAAY,gBACzF,cAAC,IAAD,CAAQC,QAAS1D,EAAMmD,QAAStG,MAAO,CAAEyE,YAAa,GAAtD,oBACA,cAAC,IAAD,CAAQoC,QAAS,kBAAM1D,EAAM2D,WAAWb,IAAOZ,KAAK,UAApD,SAA+DO,GAAczC,EAAM0C,aAZzF,SAeE,eAAC,KAAD,CAAMkB,OAAO,WAAWC,kBAAgB,EAAxC,UACE,eAAC,KAAD,CAAKC,OAAQ,GAAb,UACE,cAAC,KAAD,CAAKlE,KAAM,GAAX,SACE,cAAC,KAAKxC,KAAN,CACE2G,KAAK,YACLC,MAAM,SACNC,aAAcnB,EAAKoB,UACnBC,MAAO,CAAC,CAAEC,UAAU,EAAMjC,QAAS,iCAJrC,SAKE,eAAC,KAAD,CAAQkC,YAAY,+BAA+BC,SAAUtB,EAAa,aAA1E,UACE,cAACT,GAAD,CAAQgC,MAAM,MAAd,iBACA,cAAChC,GAAD,CAAQgC,MAAM,OAAd,kBACA,cAAChC,GAAD,CAAQgC,MAAM,MAAd,iBACA,cAAChC,GAAD,CAAQgC,MAAM,SAAd,2BAIN,cAAC,KAAD,CAAK3E,KAAM,GAAX,SACE,cAAC,KAAKxC,KAAN,CACE2G,KAAK,YACLC,MAAM,mBACNC,aAAcnB,EAAK0B,UACnBL,MAAO,CAAC,CAAEC,UAAU,EAAMjC,QAAS,iCAJrC,SAKE,cAAC,KAAD,CACEkC,YAAY,sBACZC,SAAU,SAACG,GACT,IACEzB,EAAa,YAAbA,CAA0B0B,SAASD,EAAEE,OAAOJ,MAAO,KACnD,MAAOK,GACPhD,GAASiD,QAAQ,sCAAuC,kCAMpE,cAAC,KAAD,CAAKf,OAAQ,GAAb,SACE,cAAC,KAAD,CAAKlE,KAAM,GAAX,SACE,cAAC,KAAKxC,KAAN,CACE2G,KAAK,SACLC,MAAM,SACNC,aAAcnB,EAAKgC,OACnBX,MAAO,CAAC,CAAEC,UAAU,EAAMjC,QAAS,iCAJrC,SAKE,cAAC,KAAD,CACEtF,MAAO,CAAEP,MAAO,QAChByI,YC1FS,yBD2FTT,SAAU,SAACG,GAAD,OAAOzB,EAAa,SAAbA,CAAuByB,EAAEE,OAAOJ,QACjDF,YAAY,wBAIpB,cAAC,KAAD,CAAKP,OAAQ,GAAb,SACE,cAAC,KAAD,CAAKlE,KAAM,GAAX,SACE,cAAC,KAAKxC,KAAN,CACE2G,KAAK,UACLC,MAAM,gBACNC,aAAcnB,EAAKkC,QACnBb,MAAO,CACL,CACEC,UAAU,EACVjC,QAAS,kCAPf,SAUE,cAAC,KAAM8C,SAAP,CACEC,KAAM,EACNZ,SAAU,SAACG,GAAD,OAAOzB,EAAa,UAAbA,CAAwByB,EAAEE,OAAOJ,QAClDF,YAAY,2BAIpB,cAAC,KAAD,CAAKP,OAAQ,GAAb,SACE,cAAC,KAAD,CAAKlE,KAAM,GAAX,SACE,cAAC,KAAKxC,KAAN,CACE2G,KAAK,OACLC,MAAM,cACNC,aAAcnB,EAAKb,KACnBkC,MAAO,CACL,CACEC,UAAU,EACVjC,QAAS,mCAPf,SAUE,cAAC,KAAM8C,SAAP,CACEC,KAAM,EACNZ,SAAU,SAACG,GAAD,OAAOzB,EAAa,OAAbA,CAAqByB,EAAEE,OAAOJ,QAC/CF,YAAY,yCAIpB,cAAC,KAAD,CAAKP,OAAQ,GAAb,SACE,cAAC,KAAD,CAAKlE,KAAM,EAAX,SACE,cAAC,KAAKxC,KAAN,UACE,cAAC,KAAD,CACE+H,gBAAgB,SAChBC,kBAAkB,WAClBC,QAAyB,WAAhBvC,EAAKwC,OACdhB,SAAU,SAACrI,GAAD,OAAgB+G,EAAa,SAAbA,CAAuB/G,EAAI,SAAW,aAChEsJ,gBAAc,e,wBE7GfC,OA9Bf,SAAwBxF,GACtB,IAAKA,EAAMyF,KACT,OAAO,KAGT,IAAIC,EAEJ,OAAmC,IAA3BC,KAAKC,MAAM5F,EAAMyF,KAAK,MAC5B,KAAK,IACHC,EAAO,cAAC,KAAD,CAAK5I,MAAM,QAAX,SAAoBkD,EAAMyF,OACjC,MACF,KAAK,IACHC,EAAO,cAAC,KAAD,CAAK5I,MAAM,SAAX,SAAqBkD,EAAMyF,OAClC,MACF,KAAK,IACHC,EAAO,cAAC,KAAD,CAAK5I,MAAM,MAAX,SAAkBkD,EAAMyF,OAC/B,MACF,QACEC,EAAO,cAAC,KAAD,UAAM1F,EAAMyF,OAIvB,OACE,cAAC,IAAD,CAASrJ,UAAU,MAAMvB,MAAM,mBAA/B,SACG6K,K,0OCHP,ICpBKG,GDoBCpG,GAAYlB,IAAOmB,IAAV,KAMOnE,GAGPuK,GA7Bf,SAAwB9F,GACtB,OACE,cAAC,GAAD,UACE,cAAC,KAAD,CACEkD,GAAG,cACHrG,MAAO,CAAEkJ,SAAU,QACnBC,MAAO,CACLC,KAAK,yBAAD,OAA2B3K,EAA3B,uBAAoDC,EAApD,mBACJqJ,MAAM,yBAAD,OAA2BtJ,EAA3B,uBAAoDC,EAApD,mBACLwG,IAAK,iBACLmE,OAAQ,iBACR3B,MAAM,SAAD,OAAW/I,EAAX,KACL2K,QAAS,kBAEXrD,KAAM9C,EAAMoG,a,+EEbb,SAAeC,KAAtB,gC,gDAAO,6BAAAC,EAAA,+EAEeC,KAAMC,IAAN,UAAa1L,EAAb,gBAFf,cAEG2L,EAFH,yBAGIA,EAAI3D,MAHR,uCAKH4D,QAAQ9B,MAAR,MACAhD,GAASgD,MAAM,qBAAsB,KAAIzC,SANtC,kBAOI,CAAEwE,QAAS,KAPf,0D,sBAWA,SAAeC,GAAtB,mC,gDAAO,WAA4B9E,GAA5B,gBAAAwE,EAAA,+EAEeC,KAAMM,IAAN,UAAa/L,EAAb,uBAAuCgH,EAAEoB,IAAzC,gBAAmD4D,KAAKhF,EAAG,QAF1E,cAEG2E,EAFH,yBAGIA,EAAI3D,MAHR,uCAKH4D,QAAQ9B,MAAM,gBAAd,MACAhD,GAASgD,MAAM,gBAAiB,KAAIzC,SANjC,kBAOI,IAPJ,0D,sBAWA,SAAe4E,GAAtB,mC,gDAAO,WAA4BjF,GAA5B,gBAAAwE,EAAA,+EAEeC,KAAMS,KAAN,UAAclM,EAAd,+BAA6CgH,IAF5D,cAEG2E,EAFH,yBAGIA,EAAI3D,MAHR,uCAKH4D,QAAQ9B,MAAM,gBAAd,KAAoCqC,KAAKC,UAAL,OACpCtF,GAASgD,MAAM,gBAAiB,KAAIzC,SANjC,kBAOI,IAPJ,0D,sBAWA,SAAegF,GAAtB,mC,gDAAO,WAA4BjE,GAA5B,UAAAoD,EAAA,+EAEGC,KAAMa,OAAN,UAAgBtM,EAAhB,uBAA0CoI,IAF7C,iCAGI,GAHJ,uCAKHwD,QAAQ9B,MAAM,gBAAd,KAAoCqC,KAAKC,UAAL,OACpCtF,GAASgD,MAAM,gBAAiB,KAAIzC,SANjC,mBAOI,GAPJ,0D,sBDVA,SAASkF,KACd,MAAO,GAGF,SAASC,GAAeC,EAAmB7E,GAChD,OAAQA,EAAOR,MACb,KAAK2D,GAAkB2B,YACrB,OAAKC,MAAMC,QAAQhF,EAAOiF,SAGnB,aAAIjF,EAAOiF,SAFT,GAGX,KAAK9B,GAAkB+B,aACrB,OAAOL,EAAOtJ,KAAI,SAAC6D,GAAD,OAAOA,EAAEoB,KAAOR,EAAOiF,QAAQzE,GAAKR,EAAOiF,QAAU7F,KACzE,KAAK+D,GAAkBgC,UACrB,MAAM,CAAEnF,EAAOiF,SAAf,oBAA2BJ,IAC7B,KAAK1B,GAAkBiC,aACrB,OAAOP,EAAOQ,QAAO,SAACjG,GAAD,OAAOA,EAAEoB,KAAOR,EAAOiF,QAAQzE,MACtD,QACE,MAAM,IAAIP,O,gTA1CXkD,O,6BAAAA,I,+BAAAA,I,yBAAAA,I,gCAAAA,Q,KEuFL,ICxFKmC,GDwFCC,GAAmB1J,IAAOmB,IAAV,MAKhBwI,GAAY3J,IAAOqB,KAAV,MAITuI,GAAoB5J,IAAOmB,IAAV,MAIR0I,GAxFf,SAAoBpI,GAAe,IF6CIqI,EE5C7BxF,EAASnB,KAATmB,KACAyF,EAA6BtI,EAA7BsI,OAAQC,EAAqBvI,EAArBuI,iBACVC,GF0C+BH,EE1CcE,EF2CnD,yCAAO,WAAOzG,GAAP,kBAAAwE,EAAA,6DACL+B,EAAS,CACPnG,KAAM2D,GAAkB+B,aACxBD,QAAQ,6BAAM7F,GAAP,IAAUwD,OAAQ,eAGrBmD,EAA0B,WAAb3G,EAAEwD,OAAsB,WAAa,SANnD,SAOasB,GAAa,6BAAK9E,GAAN,IAASwD,OAAQmD,KAP1C,QAOChC,EAPD,QASG6B,QAEN1G,GAAS8G,QAAT,+CAC0CD,EAD1C,KAEE,6EAEFJ,EAAS,CACPnG,KAAM2D,GAAkB+B,aACxBD,QAAQ,gBAAMlB,EAAI6B,WAGpBD,EAAS,CACPnG,KAAM2D,GAAkB+B,aACxBD,QAAQ,gBAAM7F,KAtBb,2CAAP,uDE1CMG,EAAOqG,EAAOrG,MAAQ,6CAEtB0G,EAAiC,WAAlBL,EAAOhD,OACxB,cAACzC,EAAD,CAAM+F,QAAM,EAAC1G,KAAK,UAAlB,oBACkB,aAAlBoG,EAAOhD,OACL,cAACzC,EAAD,uBACkB,aAAlByF,EAAOhD,OACL,cAACuD,GAAA,EAAD,CAAiBhM,MAAO,CAAEkJ,SAAU,IAAM+C,MAAI,IAC9C,cAACjG,EAAD,CAAMX,KAAK,SAAX,qBAER,OACE,eAAC,KAAD,CACE6G,WAAS,EACTC,UAAU,EACVC,MACE,qBACEpM,MAAO,CAACoC,QAAS,YACjByE,QAAS,kBAAM8E,EAAoBF,IAFrC,SAGGK,IAEL9N,MAAK,UAAKyN,EAAOpE,UAAZ,YAAyBoE,EAAOxD,QACrCjI,MAAO,CACLqM,aAAc,OACdC,QAA2B,WAAlBb,EAAOhD,OAAsB,EAAI,MAE5C8D,QAAS,CACP,yBACA,yBACA,yBACA,yBACA,yBACA,yBACA,cAACC,GAAA,EAAD,CAA6B3F,QAAS,WAC/B4E,EAAOpF,GAIZlD,EAAMsJ,iBAAiBhB,EAAOpF,IAH5BtB,GAASiD,QAAQ,qBAAsB,MAFvB,UAOpB,cAAC0E,GAAA,EAAD,CAAyB7F,QAAS,WAC3B4E,EAAOpF,GAIZlD,EAAMwJ,eAAelB,EAAOpF,IAH1BtB,GAASiD,QAAQ,qBAAsB,MAFzB,SA5BtB,UAoCE,eAACoD,GAAD,WACE,cAACC,GAAD,UACE,cAAC,GAAD,CAAgBzC,KAAM6C,EAAO9D,cAE/B,cAAC0D,GAAD,UACE,cAAC,KAAD,uBAEF,cAACA,GAAD,UACE,cAAC,KAAD,wBAAaI,EAAOpF,WAGxB,cAACiF,GAAD,UACE,cAAC,GAAD,CAAgB/B,QAASkC,EAAOtD,YAEjC/C,EAAKwH,MAAM,MAAMxL,KAAI,SAACyL,EAAKvL,GAAN,OACpB,iCACE,cAAC0E,EAAD,CAAMX,KAAK,YAAX,SAAwBwH,IACxB,yBAFSvL,UEvEJ,SAASwL,GAAW3J,GACjC,OACE,mCACGA,EAAM2G,QAAQ1I,KAAI,SAAC6D,EAAG3D,GAAJ,OACjB,cAAC,GAAD,CAEEmK,OAAQxG,EACR0H,eAAgBxJ,EAAMwJ,eACtBF,iBAAkBtJ,EAAMsJ,iBACxBf,iBAAkBvI,EAAMuI,kBAJnBpK,QCXR,SAAeyL,KAAtB,gC,gDAAO,6BAAAtD,EAAA,+EAEeC,KAAMC,IAAN,UAAa1L,EAAb,eAFf,cAEG2L,EAFH,yBAGIA,EAAI3D,MAHR,uCAKH4D,QAAQ9B,MAAR,MACAhD,GAASgD,MAAM,oBAAqB,KAAIzC,SANrC,kBAOI,CAAE0H,QAAS,KAPf,0D,sBFsBA,SAASC,KACd,MAAO,GAGF,SAASC,GAAexC,EAAkB7E,GAC/C,OAAQA,EAAOR,MACb,KAAK8F,GAAkBR,YACrB,OAAKC,MAAMC,QAAQhF,EAAOiF,SAGnB,aAAIjF,EAAOiF,SAFT,GAGX,KAAKK,GAAkBgC,YACrB,OAAOzC,EAAOtJ,KAAI,SAAC6D,GAAD,OAAOA,EAAEoB,KAAOR,EAAOiF,QAAQzE,GAAKR,EAAOiF,QAAU7F,KACzE,KAAKkG,GAAkBiC,SACrB,MAAM,CAAEvH,EAAOiF,SAAf,oBAA2BJ,IAC7B,KAAKS,GAAkBkC,YACrB,OAAO3C,EAAOQ,QAAO,SAACjG,GAAD,OAAOA,EAAEoB,KAAOR,EAAOiF,QAAQzE,MACtD,QACE,MAAM,IAAIP,O,oNA1CXqF,O,6BAAAA,I,6BAAAA,I,uBAAAA,I,8BAAAA,Q,KGyDL,IAAMmC,GAAkB5L,IAAOmB,IAAV,MAKf0K,GAAW7L,IAAOqB,KAAV,MAICyK,GA5Df,SAAmBrK,GAAe,IACxB6C,EAASnB,KAATmB,KACAyH,EAAUtK,EAAVsK,MACFrI,EAAOqI,EAAMrI,MAAQ,2CAErBsI,EAA+B,WAAjBD,EAAMhF,OACtB,cAACzC,EAAD,CAAM+F,QAAM,EAAC1G,KAAK,UAAlB,oBACiB,aAAjBoI,EAAMhF,OACJ,cAACzC,EAAD,uBACiB,aAAjByH,EAAMhF,OACJ,cAACuD,GAAA,EAAD,CAAiBhM,MAAO,CAAEkJ,SAAU,IAAM+C,MAAI,IAC9C,cAACjG,EAAD,CAAMX,KAAK,SAAX,qBAER,OACE,eAAC,KAAD,CACE6G,WAAS,EACTC,UAAU,EACVC,MAAQ,qBAAKpM,MAAO,CAAEoC,QAAS,YAAvB,SAAsCsL,IAC9C1P,MAAK,UAAKyP,EAAMpG,UAAX,YAAwBoG,EAAMxF,QACnCjI,MAAO,CACLqM,aAAc,OACdC,QAA0B,WAAjBmB,EAAMhF,OAAsB,EAAI,MAE3C8D,QAAS,CACP,yBACA,yBACA,yBACA,yBACA,yBACA,yBACA,cAACC,GAAA,EAAD,CAA6BmB,UAAQ,GAAjB,UACpB,cAACjB,GAAA,EAAD,CAAyBiB,UAAQ,GAAf,SAjBtB,UAmBE,eAACL,GAAD,WACE,cAACC,GAAD,UACE,cAAC,KAAD,sBAEF,cAACA,GAAD,UACE,cAAC,KAAD,wBAAaE,EAAMpH,WAGtBjB,EAAKwH,MAAM,MAAMxL,KAAI,SAACyL,EAAKvL,GAAN,OACpB,iCACE,cAAC0E,EAAD,CAAMX,KAAK,YAAX,SAAwBwH,IACxB,yBAFSvL,UC5CJ,SAASsM,GAAUzK,GAChC,OACE,mCACGA,EAAM6J,QAAQ5L,KAAI,SAAC4B,EAAG1B,GAAJ,OACjB,cAAC,GAAD,CAAmBmM,MAAOzK,GAAV1B,Q,sRCQxB,IAAMuM,GAAyB,CAC7B5F,OAAQ,GACRZ,UAAW,MACXM,UAAW,IACXQ,QAAS,GACT/C,KAAM,GACNwB,SAAU,aACV6B,OAAQ,UAkIV,IAAM7F,GAAYlB,IAAOmB,IAAV,MAITiL,GAAepM,IAAOmB,IAAV,MAUHkL,GAlIf,WAAgC,ILUQvC,EKVT,EACOwC,qBAAWvD,GAAgB,GAAID,IADtC,mBACtBV,EADsB,KACb4B,EADa,OAEMsC,qBAAWd,GAAgB,GAAID,IAFrC,mBAEtBD,EAFsB,KAEbiB,EAFa,OAGSvN,oBAAS,GAHlB,mBAGtBwN,EAHsB,KAGTC,EAHS,KAIvBC,GLMgC5C,EKNayC,ELOnD,wBAAO,6BAAAxE,EAAA,sEACasD,KADb,OACCnD,EADD,OAEL4B,EAAS,CACPnG,KAAM8F,GAAkBR,YACxBG,QAASlB,EAAIoD,UAJV,4CKNDqB,ERMD,SAAiC7C,GACtC,+BAAO,6BAAA/B,EAAA,sEACaD,KADb,OACCI,EADD,OAEL4B,EAAS,CACPnG,KAAM2D,GAAkB2B,YACxBG,QAASlB,EAAIE,UAJV,2CQPqBwE,CAAwB5C,GAC9CxB,ER0ED,SAAgCsB,GACrC,gDAAO,WAAOvG,GAAP,gBAAAwE,EAAA,sEACaS,GAAa,gBAAKjF,IAD/B,WACC2E,EADD,QAEI6B,OAFJ,0CAGI,GAHJ,cAML1G,GAAS8G,QAAT,oCAEE,6EAEFL,EAAS,CACPnG,KAAM2D,GAAkBgC,UACxBF,QAAQ,gBAAMlB,EAAI6B,UAZf,mBAcE,GAdF,2CAAP,sDQ3EqB8C,CAAuB7C,GACtC3B,ER2CD,SAAgCyB,GACrC,gDAAO,WAAOvG,GAAP,gBAAAwE,EAAA,6DACL+B,EAAS,CACPnG,KAAM2D,GAAkB+B,aACxBD,QAAQ,6BAAM7F,GAAP,IAAUwD,OAAQ,eAHtB,SAMasB,GAAa,gBAAK9E,IAN/B,WAMC2E,EAND,QAQI6B,OARJ,uBASHD,EAAS,CACPnG,KAAM2D,GAAkB+B,aACxBD,QAAQ,gBAAM7F,KAXb,mBAaI,GAbJ,cAiBLF,GAAS8G,QAAT,8BAEE,6EAEFL,EAAS,CACPnG,KAAM2D,GAAkB+B,aACxBD,QAAQ,gBAAMlB,EAAI6B,UAvBf,mBAyBE,GAzBF,4CAAP,sDQ5CqB+C,CAAuB9C,GACtCpB,ER2FD,SAAgCkB,GACrC,gDAAO,WAAOiD,GAAP,UAAAhF,EAAA,sEACiBa,GAAamE,GAD9B,2DAII,GAJJ,cAML1J,GAAS8G,QAAT,oCAEE,6EAEFL,EAAS,CAAEnG,KAAM2D,GAAkBiC,aAAcH,QAAS,CAAEzE,GAAIoI,KAV3D,mBAWE,GAXF,2CAAP,sDQ5FqBC,CAAuBhD,GARf,EASiBhL,mBAA0B,CAAE6F,SAAS,IATtD,mBAStBoI,EATsB,KASLC,EATK,KAwB7B,OAZA5N,qBAAU,WACe,IAAnB8I,EAAQ/F,SACVoK,GAAe,GACfnK,YAAW,WACTqK,IACAD,IACAD,GAAe,KACd,QAEJ,CAACrE,EAAQ/F,OAAQsK,EAAqBD,IAIvC,eAAC,GAAD,WACE,cAAC,GAAD,CAAYpQ,MAAM,oBAClB,eAAC8P,GAAD,WACE,cAAC,IAAD,CACEzI,KAAK,UACLwJ,MAAM,SACNC,KAAM,cAACC,GAAA,EAAD,IACNlI,QAAS,kBAAM+H,EAAmB,CAAErI,SAAS,EAAMV,OAAQ,gBAE7D,cAAC,IAAD,CACEgJ,MAAM,SACNG,QAASd,EACTY,KAAM,cAACG,GAAA,EAAD,IACNpI,QAAO,wBAAE,uBAAA4C,EAAA,6DACP0E,GAAe,GADR,SAEDE,IAFC,uBAGDD,IAHC,OAIPpK,YAAW,kBAAMmK,GAAe,KAAQ,KAJjC,gDAQb,cAAC,KAAD,CAAKlH,OAAQ,GAAb,SACE,eAAC,KAAD,CAAKlE,KAAM,GAAX,UACE,cAAC,KAAD,CAASmM,YAAY,OAArB,qBACA,cAACpC,GAAD,CACEhD,QAASA,EACT2C,iBAAkBnC,EAClBqC,eAAgB,SAAC8B,GACf,IAAM3G,EAASgC,EAAQqF,MAAK,SAAClK,GAAD,OAAOA,EAAEoB,KAAOoI,KACvC3G,EAIL8G,EAAmB,CACjBrI,SAAS,EACTV,OAAQ,WACRI,KAAM6B,IANN/C,GAASiD,QAAQ,sBAAjB,iBAAkDyG,EAAlD,gBASJ/C,iBAAkBA,SAGxB,cAAC,KAAD,CAAKzE,OAAQ,GAAb,SACE,eAAC,KAAD,CAAKlE,KAAM,GAAX,UACE,cAAC,KAAD,CAASmM,YAAY,OAArB,qBACA,cAACtB,GAAD,CAAWZ,QAASA,SAGvB2B,EAAgBpI,SACf,cAACR,GAAD,CACEF,OAAQ8I,EAAgB9I,OACxBU,QAASoI,EAAgBpI,QACzBN,KAC6B,aAA3B0I,EAAgB9I,OAAwB8I,EAAgB1I,KAAxD,gBAAoE4H,IAEtEvH,QAAS,kBAAMsI,EAAmB,CAAErI,SAAS,KAC7CO,WAAU,yCAAE,WAAOb,GAAP,gBAAAwD,EAAA,yDACNoC,GAAmB,EACQ,aAA3B8C,EAAgB9I,OAFV,gCAGQqE,EAAa,CAC3BjC,OAAQhC,EAAKgC,OACbZ,UAAWpB,EAAKoB,UAChBM,UAAW1B,EAAK0B,UAChBQ,QAASlC,EAAKkC,QACd/C,KAAMa,EAAKb,KACXwB,SAAUX,EAAKW,SACf6B,OAAQxC,EAAKwC,SAVP,OAGRoD,EAHQ,iCAa0B,aAA3B8C,EAAgB9I,OAbf,kCAcQkE,EAAa,CAC3B1D,GAAIJ,EAAKI,GACT4B,OAAQhC,EAAKgC,OACbZ,UAAWpB,EAAKoB,UAChBM,UAAW1B,EAAK0B,UAChBQ,QAASlC,EAAKkC,QACd/C,KAAMa,EAAKb,KACXwB,SAAUX,EAAKW,SACf6B,OAAQxC,EAAKwC,SAtBP,QAcRoD,EAdQ,eAyBNA,GACF+C,EAAmB,CAAErI,SAAS,IA1BtB,4CAAF,4D,ySC9EpB,IAAM3D,GAAYlB,IAAOmB,IAAV,MAOAuM,GAxCf,WAAgB,IACPC,EAA0BrN,IAA1BqN,MAAOC,EAAmBtN,IAAnBsN,QAASC,EAAUvN,IAAVuN,OACvB,OACE,cAAC,GAAD,CAAWC,UAAU,MAArB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOjO,OAAK,EAACxD,KAAK,SAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,eAAC,IAAD,WACE,cAAC+D,EAAD,IACA,eAAC,IAAD,WACE,cAACuN,EAAD,CAAO5P,MAAO,IAAd,SACE,cAAC,EAAD,MAEF,eAAC6P,EAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAO/N,OAAK,EAACxD,KAAK,gBAAlB,SACE,cAAC,GAAD,QAGJ,cAACwR,EAAD,oDC7BlBE,IAAS3L,OAAO,cAAC,GAAD,IAAS4L,SAASC,eAAe,W","file":"static/js/main.30ef3895.chunk.js","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react'\nimport { NavLink } from \"react-router-dom\";\nimport { Menu, Progress, Tooltip } from 'antd'\nimport { CloseCircleOutlined, CheckCircleOutlined, QuestionCircleOutlined} from '@ant-design/icons'\nimport { MENU } from '../../const/menu';\nimport { socketCtx } from '../../utils/socket';\nimport styled from 'styled-components';\nimport { FRONT_ERROR, FRONT_SUCCESS, FRONT_WARNING } from '../../const/color';\n\nenum ConnStatus {\n  alive = 'alive',\n  disconnect = 'disconnect',\n  unknown = 'unknown',\n}\n\ninterface ISocketStatus {\n  mockingbird: ConnStatus;\n  envoy: ConnStatus\n}\n\nconst initConnStatus = {\n  mockingbird: ConnStatus.unknown,\n  envoy: ConnStatus.unknown\n};\n\nfunction renderStatus(s: ConnStatus, serviceName: string): JSX.Element {\n  switch (s) {\n    case ConnStatus.alive:\n      return (\n        <Tooltip placement=\"top\" title='Is alive.'>\n          <StatusItem>\n            <td width={24}>\n              <Progress percent={100} showInfo={false} steps={5} size=\"small\" strokeColor={FRONT_SUCCESS}/>\n            </td>\n            <td width={12}>\n              <CheckCircleOutlined style={{ color: FRONT_SUCCESS }} />\n            </td>\n            <ServiceName>{serviceName}</ServiceName>\n          </StatusItem>\n        </Tooltip>\n      );\n    case ConnStatus.disconnect:\n      return (\n        <Tooltip placement=\"top\" title='Disconnected.'>\n          <StatusItem>\n            <td>\n              <Progress percent={33} showInfo={false} steps={5} size=\"small\" strokeColor={FRONT_ERROR} />\n            </td>\n            <td>\n              <CloseCircleOutlined style={{ color: FRONT_ERROR }} />\n            </td>\n            <ServiceName>{serviceName}</ServiceName>\n          </StatusItem>\n        </Tooltip>\n      );\n    case ConnStatus.unknown:\n    default:\n      return (\n        <Tooltip placement=\"top\" title='Status unknown.'>\n          <StatusItem>\n            <td>\n              <Progress percent={64} showInfo={false} steps={5} size=\"small\" strokeColor={FRONT_WARNING} />\n            </td>\n            <td>\n              <QuestionCircleOutlined style={{ color: FRONT_WARNING }} />\n            </td>\n            <ServiceName>{serviceName}</ServiceName>\n          </StatusItem>\n        </Tooltip>\n      );\n  }\n}\n\nexport default function MenuList() {\n  const { Item } = Menu;\n  const socket = useContext(socketCtx)\n  const [socketState, setSocketState] = useState<ISocketStatus>(initConnStatus)\n  const socketCb = useCallback(() => {\n    socket.on('connect', function () {\n      setSocketState({\n        mockingbird: ConnStatus.alive,\n        envoy: ConnStatus.unknown\n      })\n    });\n    socket.on('disconnect', function () {\n      setSocketState({\n        mockingbird: ConnStatus.disconnect,\n        envoy: ConnStatus.unknown\n      })\n    });\n  }, [socket])\n\n  useEffect(() => { socketCb() })\n\n  return (\n    <Menu\n      style={{ width: 256, height: '100%'}}\n      defaultSelectedKeys={[MENU[0].path]}\n      mode='inline'>\n      {MENU.map((item, i) => (\n        <Item key={item.path} title={item.title}>\n          <NavLink key={i} exact to={item.path}>\n            {item.title}\n          </NavLink>\n        </Item>\n      ))}\n\n      <StatusFooter>\n        {renderStatus(socketState.mockingbird, 'Mockingbird Service')}\n        {renderStatus(socketState.envoy, 'Envoy Proxy')}\n      </StatusFooter>\n    </Menu>\n  )\n}\n\nconst StatusFooter = styled.table`\n  position: fixed;\n  bottom: 0;\n  margin: 0 0 24px 24px;\n  /* width: 232px; */\n`;\n\nconst StatusItem = styled.tr`\n  height: 28px;\n`;\n\nconst ServiceName = styled.td`\n  padding-left: 8px;\n`;\n","\nexport interface IMenu {\n  path: string;\n  title: string;\n  desc?: string;\n  icon?: any;\n}\n\nexport const MENU: IMenu[] = [\n  {\n    path: '/admin/routes',\n    title: 'Proxy & Mockers'\n  },\n  {\n    path: '/admin/docs',\n    title: 'Documents'\n  }\n];\n","\nexport const config = {\n  host: 'http://localhost:3000',\n  socketHost: 'http://localhost:3000/'\n}","import { createContext } from 'react';\nimport { config } from '../config';\n\n// from cdn.js\nconst socket = (window as any).io(config.socketHost);\n\nexport const socketCtx = createContext(socket)\n","\nexport const BASE_BLUE = '#001529'\n\nexport const BASE_PINK = '#b457a0'\n\nexport const LIGHT_GRAY = '#676669'\n\nexport const CODE_GRAY = '#282c34'\n\nexport const FRONT_WHITE = 'white';\n\nexport const FRONT_SUCCESS = '#52c41a';\n\nexport const FRONT_WARNING = 'orange'\n\nexport const FRONT_ERROR = '#d34740'","export default __webpack_public_path__ + \"static/media/logo.4e3ea0cf.svg\";","import React from 'react';\nimport styled from 'styled-components'\nimport { Layout } from 'antd';\nimport Logo from '../../logo.svg';\nimport { FRONT_WHITE } from '../../const/color';\nimport { NavLink } from \"react-router-dom\";\n\nexport default function NavBar() {\n  const { Header } = Layout\n  return (\n    <Header style={{\n      display: \"flex\",\n      alignItems: 'center',\n      justifyContent: 'left',\n      padding: '0 18px'\n    }}>\n      <NavLink to='/admin'>\n        <AppLogo src={Logo} alt='' />\n      </NavLink>\n      <NavLink to='/admin'>\n        <AppName> Mockingbird </AppName>\n      </NavLink>\n    </Header>\n  );\n}\n\nconst AppLogo = styled.img`\n  width: 50px;\n  height: 50px;\n`;\n\nconst AppName = styled.h1`\n  margin: 12px 12px 12px 5px;\n  color: ${FRONT_WHITE};\n`;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n  list: string[];\n  typingDelay: number;\n  sentenceDelay: number;\n  sentenceShowTime: number;\n  backspaceDelay: number;\n}\n\nfunction Typing(props: Props) {\n\n  const [showing, setShowing] = useState({ idx: 0, text: '', direction: 1 })\n  const {\n    list,\n    sentenceDelay,\n    typingDelay,\n    sentenceShowTime,\n    backspaceDelay,\n  } = props;\n\n  const render = useCallback(() => {\n    if (showing.direction === -1 && showing.text.length === 0) {\n      setTimeout(() => {\n        setShowing({\n          direction: 1,\n          text: '',\n          idx: (showing.idx < (list.length - 1)\n            ? showing.idx + 1\n            : 0)\n        })\n      }, sentenceDelay);\n      return;\n    }\n\n    if (showing.text.length === list[showing.idx].length) {\n      setTimeout(() => {\n        setShowing({\n          idx: showing.idx,\n          direction: -1,\n          text: list[showing.idx].substring(0, showing.text.length - 1),\n        })\n      }, sentenceShowTime)\n      return;\n    }\n\n    setTimeout(() => {\n      setShowing({\n        idx: showing.idx,\n        direction: showing.direction,\n        text: list[showing.idx].substring(0, showing.text.length + showing.direction),\n      })\n    }, showing.direction === 1 ? typingDelay : backspaceDelay)\n  }, [\n    list,\n    sentenceDelay,\n    typingDelay,\n    sentenceShowTime,\n    backspaceDelay,\n    showing.direction,\n    showing.idx,\n    showing.text.length\n  ])\n\n  useEffect(() => { setTimeout(render, 0) }, [render]);\n\n  return (\n    <Container>\n      {showing.text}\n      <BlinkCursor blink={showing.text.length === props.list[showing.idx].length}>|</BlinkCursor>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: flex-start;\n`;\n\nconst BlinkCursor = styled.span<{ blink: boolean }>`\n  animation: ${(p) => p.blink ? 'blinker .8s step-start infinite' : 'none'};\n  @keyframes blinker {\n    50% { opacity: 0; };\n  }\n`;\n\nexport default Typing;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from \"react-router-dom\";\nimport { Layout, Button } from 'antd'\nimport { BASE_BLUE, BASE_PINK, FRONT_WHITE } from '../const/color';\nimport Logo from '../logo.svg'\nimport Typing from '../components/comm/Typing';\n\nfunction HomePage() {\n  return (\n    <BannerContainer>\n      <Layout>\n        <Layout.Header style={{ backgroundColor: BASE_PINK }} />\n      </Layout>\n      <LogoImg src={Logo} alt='' />\n      <AppTitle>Mockingbrid</AppTitle>\n      <Slogan>\n        <span style={{ color: BASE_PINK, marginRight: 12 }}>Mockingbird</span>\n        <span style={{ marginRight: 12 }}>your</span>\n        <div>\n          <Typing\n            typingDelay={80}\n            backspaceDelay={40}\n            sentenceShowTime={2000}\n            sentenceDelay={600}\n            list={[\n              'API drafts.',\n              'developing APIs.',\n              'chaos test.',\n              'canary update.',\n              'alpha release.'\n            ]} />\n        </div>\n      </Slogan>\n      <NavLink to='/admin/routes'>\n        <StartBtn>\n          <Button ghost size='large'>Get Start</Button>\n        </StartBtn>\n      </NavLink>\n    </BannerContainer>\n  );\n}\n\nconst BannerContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  color: ${FRONT_WHITE};\n  text-align: center;\n\n  display: flex;\n  text-align: center;\n  flex-direction: column;\n  height: 100%;\n  background-color: ${BASE_BLUE};\n  > * {\n    background-color: ${BASE_BLUE};\n  }\n`;\n\nconst LogoImg = styled.img`\n  width: 18%;\n  margin: 0 auto;\n  flex-grow: 1;\n`;\n\nconst AppTitle = styled.div`\n  font-size: 5em;\n`;\n\nconst Slogan = styled.div`\n  margin-left: calc(50% - 275px);\n  flex-grow: 1;\n  font-size: 3em;\n  display: flex;\n  justify-content: flex-start;\n`;\n\nconst StartBtn = styled.div`\n  flex-grow: 3;\n  padding: 80px 0 180px 0; \n`;\n\nexport default HomePage;\n","import React from 'react';\nimport { Typography } from 'antd';\n\nfunction PageHeader(props: { title: string }) {\n  if (!props.title) {\n    return null\n  }\n  const { Title } = Typography;\n  return (\n    <Title style={{ margin: '24px 0 12px 0' }}>\n      {props.title}\n    </Title>\n  );\n}\n\nexport default PageHeader;\n","\nimport { notification } from 'antd';\nimport { IconType } from 'antd/lib/notification';\n\ntype Notifier = (msg: string, desc: string) => void\n\ninterface Notify {\n  success: Notifier;\n  info: Notifier;\n  error: Notifier;\n  warning: Notifier;\n}\n\nconst notifyWithIcon = (type: IconType, message: string, description: string) => notification[type]({ message, description, duration: 20 });\n\nexport const n = ['success', 'info', 'error', 'warning'].reduce((m, key) => {\n  m[key] = (msg: string, desc: string) =>  notifyWithIcon(key as IconType, msg, desc)\n  return m;\n}, {} as { [key: string]: Notifier})\n\nexport const notifier = n as any as Notify;\n","import React, { useState } from 'react';\nimport { Drawer, Form, Button, Col, Row, Input, Select, Switch, Typography } from 'antd';\nimport { IMocker } from '../../interfaces/Mocker';\nimport { ProxyHost } from '../../const/envoy';\nimport { notifier } from '../../utils/notify';\n\nconst { Option } = Select;\n\ninterface Props {\n  data: IMocker;\n  visible: boolean;\n  action: 'toCreate' | 'toUpdate';\n  onClose: () => void;\n  onComplete: (data: IMocker) => void;\n}\n\nfunction getSubmitText(action: 'toCreate' | 'toUpdate'): string {\n  switch (action) {\n    case 'toCreate':\n      return 'Create';\n    case 'toUpdate':\n      return 'save';\n    default:\n      throw new Error('unknown action')\n  }\n}\n\nexport default function MockerForm(props: Props) {\n  const { Text } = Typography;\n  const [data, setData] = useState<IMocker>(props.data)\n  const setDataByKey = (key: keyof IMocker) => (val: any) => setData({ ...data, [key]: val })\n\n  return (\n    <Drawer\n      title={props.action === 'toCreate' \n        ? \"Create a new mocker endpoint\"\n        : `Update mocker ${props.data.id}`}\n      width={720}\n      onClose={props.onClose}\n      visible={props.visible}\n      bodyStyle={{ paddingBottom: 80 }}\n      footer={\n        <div style={{ textAlign: 'right' }}>\n          <Text type='secondary' style={{ marginRight: 8 }}>Last update by {props.data.createBy || 'AndrewChen'}</Text>\n          <Button onClick={props.onClose} style={{ marginRight: 8 }}>Cancel</Button>\n          <Button onClick={() => props.onComplete(data)} type=\"primary\">{getSubmitText(props.action)}</Button>\n        </div>\n      }>\n      <Form layout=\"vertical\" hideRequiredMark>\n        <Row gutter={16}>\n          <Col span={12}>\n            <Form.Item\n              name=\"reqMethod\"\n              label=\"Method\"\n              initialValue={data.reqMethod}\n              rules={[{ required: true, message: 'Please select an HTTP method' }]}>\n              <Select placeholder=\"Please select an HTTP method\" onChange={setDataByKey('reqMethod')}>\n                <Option value=\"GET\">GET</Option>\n                <Option value=\"POST\">POST</Option>\n                <Option value=\"PUT\">PUT</Option>\n                <Option value=\"DELETE\">DELETE</Option>\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item\n              name=\"resStatus\"\n              label=\"HTTP status code\"\n              initialValue={data.resStatus}\n              rules={[{ required: true, message: 'Please enter the HTTP status' }]}>\n              <Input\n                placeholder=\"200/201/403/404/500\"\n                onChange={(e) => {\n                  try {\n                    setDataByKey('resStatus')(parseInt(e.target.value, 10))\n                  } catch (error) {\n                    notifier.warning('Response status should be a number.', '200/201/403/404/500')\n                  }\n                }} />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col span={24}>\n            <Form.Item\n              name=\"prefix\"\n              label=\"Prefix\"\n              initialValue={data.prefix}\n              rules={[{ required: true, message: 'Please enter endpoint prefix' }]}>\n              <Input\n                style={{ width: '100%' }}\n                addonBefore={ProxyHost}\n                onChange={(e) => setDataByKey('prefix')(e.target.value)}\n                placeholder=\"/api/test/123\" />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col span={24}>\n            <Form.Item\n              name=\"resBody\"\n              label=\"Response body\"\n              initialValue={data.resBody}\n              rules={[\n                {\n                  required: true,\n                  message: 'Enter the mock JSON you want.',\n                },\n              ]}>\n              <Input.TextArea\n                rows={8}\n                onChange={(e) => setDataByKey('resBody')(e.target.value)}\n                placeholder='{ \"demo\": true }' />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col span={24}>\n            <Form.Item\n              name=\"desc\"\n              label=\"Description\"\n              initialValue={data.desc}\n              rules={[\n                {\n                  required: true,\n                  message: 'please enter some descriptions',\n                },\n              ]}>\n              <Input.TextArea\n                rows={8}\n                onChange={(e) => setDataByKey('desc')(e.target.value)}\n                placeholder=\"please enter some descriptions\" />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col span={8}>\n            <Form.Item>\n              <Switch\n                checkedChildren=\"active\"\n                unCheckedChildren=\"inactive\"\n                checked={data.status === 'active'}\n                onChange={(s: boolean) => setDataByKey('status')(s ? 'active' : 'inactive')}\n                defaultChecked />\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n    </Drawer>\n  );\n}\n","\nexport const ProxyHost = 'http://localhost:10001'","\nimport React from 'react';\nimport { Tag, Tooltip } from 'antd';\n\nfunction HttpStatusCode(props: { code: number }) {\n  if (!props.code) {\n    return null\n  }\n\n  let tag;\n\n  switch (Math.floor(props.code/100)*100) {\n    case 200:\n      tag = (<Tag color='green'>{props.code}</Tag>);\n      break;\n    case 400:\n      tag = (<Tag color='orange'>{props.code}</Tag>);\n      break;\n    case 500:\n      tag = (<Tag color='red'>{props.code}</Tag>);\n      break;\n    default:\n      tag = (<Tag>{props.code}</Tag>);\n      break;\n  }\n\n  return (\n    <Tooltip placement=\"top\" title='HTTP status code'>\n      {tag}\n    </Tooltip>\n  )\n  \n}\n\nexport default HttpStatusCode;\n","import React from 'react';\nimport styled from 'styled-components'\nimport JSONPretty from 'react-json-pretty';\nimport { CODE_GRAY, FRONT_WHITE, LIGHT_GRAY } from '../../const/color';\n\nfunction JSONBeautifier(props: { jsonStr: string }) {\n  return (\n    <Container>\n      <JSONPretty\n        id=\"json-pretty\"\n        style={{ fontSize: \".9em\" }}\n        theme={{\n          main: `line-height:1.3;color:${LIGHT_GRAY};background:${CODE_GRAY};overflow:auto;`,\n          error: `line-height:1.3;color:${LIGHT_GRAY};background:${CODE_GRAY};overflow:auto;`,\n          key: 'color:#d19130;',\n          string: 'color:#91ba45;',\n          value: `color:${FRONT_WHITE};`,\n          boolean: 'color:#cc4954;',\n        }}\n        data={props.jsonStr}>\n      </JSONPretty>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  padding: 16px 12px 2px 12px;\n  margin: 4px 0;\n  border-radius: 8px;\n  min-width: 400px;\n  max-width: 800px;\n  background-color: ${CODE_GRAY}\n`;\n\nexport default JSONBeautifier;\n","import { Dispatch } from 'react';\nimport { createMocker, deleteMocker, listMockers, updateMocker } from '../api/mockers';\nimport { IMocker } from \"../interfaces/Mocker\";\nimport { notifier } from '../utils/notify';\n\nenum MockersActionType {\n  RefreshList,\n  UpdateMocker,\n  AddMocker,\n  RemoveMocker,\n}\n\ntype Action = {\n  type: MockersActionType.RefreshList;\n  payload: IMocker[];\n} | {\n  type: MockersActionType.UpdateMocker;\n  payload: IMocker;\n} | {\n  type: MockersActionType.AddMocker;\n  payload: IMocker;\n} | {\n  type: MockersActionType.RemoveMocker;\n  payload: { id: number }\n}\n\nexport type MockerDispatcher = Dispatch<Action>\n\n// reducer create method\nexport function mockersReducerInit(): IMocker[] {\n  return []\n}\n\nexport function mockersReducer(origin: IMocker[], action: Action): IMocker[] {\n  switch (action.type) {\n    case MockersActionType.RefreshList:\n      if (!Array.isArray(action.payload)) {\n        return [];\n      }\n      return [...action.payload];\n    case MockersActionType.UpdateMocker:\n      return origin.map((m) => m.id === action.payload.id ? action.payload : m);\n    case MockersActionType.AddMocker:\n      return [action.payload, ...origin];\n    case MockersActionType.RemoveMocker:\n      return origin.filter((m) => m.id !== action.payload.id);\n    default:\n      throw new Error();\n  }\n}\n\n// operator methods\nexport function genRefreshMockersAction(dispatch: MockerDispatcher): () => Promise<void> {\n  return async () => {\n    const res = await listMockers();\n    dispatch({\n      type: MockersActionType.RefreshList,\n      payload: res.mockers\n    });\n  };\n}\n\nexport function genToggleMockersAction(dispatch: MockerDispatcher): (m: IMocker) => Promise<void> {\n  return async (m: IMocker) => {\n    dispatch({\n      type: MockersActionType.UpdateMocker,\n      payload: { ...m, status: 'updating' }\n    });\n\n    const nextStatus = m.status === 'active' ? 'inactive' : 'active';\n    const res = await updateMocker({ ...m, status: nextStatus });\n    \n    if (res.mocker) {\n      // TODO: check envoy status\n      notifier.success(\n        `Successfully update mocker status to ${nextStatus}.`,\n        'Please wait few second for the backend service to update the Envoy proxy.'\n      )\n      dispatch({\n        type: MockersActionType.UpdateMocker,\n        payload: { ...res.mocker }\n      });\n    } else {\n      dispatch({\n        type: MockersActionType.UpdateMocker,\n        payload: { ...m }\n      });\n    }\n  }\n}\n\nexport function genUpdateMockersAction(dispatch: MockerDispatcher): (m: IMocker) => Promise<boolean> {\n  return async (m: IMocker) => {\n    dispatch({\n      type: MockersActionType.UpdateMocker,\n      payload: { ...m, status: 'updating' }\n    });\n\n    const res = await updateMocker({ ...m });\n\n    if (!res.mocker) {\n      dispatch({\n        type: MockersActionType.UpdateMocker,\n        payload: { ...m }\n      });\n      return false\n    }\n\n    // TODO: check envoy status\n    notifier.success(\n      `Successfully update mocker.`,\n      'Please wait few second for the backend service to update the Envoy proxy.'\n    )\n    dispatch({\n      type: MockersActionType.UpdateMocker,\n      payload: { ...res.mocker }\n    });\n    return true;\n  }\n}\n\nexport function genCreateMockersAction(dispatch: MockerDispatcher): (m: IMocker) => Promise<boolean> {\n  return async (m: IMocker) => {\n    const res = await createMocker({ ...m });\n    if (!res.mocker) {\n      return false\n    }\n    // TODO: check envoy status\n    notifier.success(\n      `Successfully create a new mocker.`,\n      'Please wait few second for the backend service to update the Envoy proxy.'\n    )\n    dispatch({\n      type: MockersActionType.AddMocker,\n      payload: { ...res.mocker }\n    });\n    return true;\n  }\n}\n\nexport function genDeleteMockersAction(dispatch: MockerDispatcher): (mockerId: number) => Promise<boolean> {\n  return async (mockerId: number) => {\n    const success = await deleteMocker(mockerId);\n    // TODO: check envoy status\n    if (!success) {\n      return false;\n    }\n    notifier.success(\n      `Successfully create a new mocker.`,\n      'Please wait few second for the backend service to update the Envoy proxy.'\n    );\n    dispatch({ type: MockersActionType.RemoveMocker, payload: { id: mockerId } });\n    return true;\n  }\n}\n","import axios from \"axios\";\nimport omit from 'lodash/omit'\nimport { notifier } from '../utils/notify'\nimport {config} from '../config';\nimport { IListMockerRes, IMocker, IUpdateMockerRes } from \"../interfaces/Mocker\";\n\nexport async function listMockers(): Promise<IListMockerRes> {\n  try {\n    const res = await axios.get(`${config.host}/api/mocker`)\n    return res.data\n  } catch (err) {\n    console.error(err);\n    notifier.error('listMockers failed', err.message)\n    return { mockers: [] };\n  }\n}\n\nexport async function updateMocker(m: IMocker): Promise<IUpdateMockerRes> {\n  try {\n    const res = await axios.put(`${config.host}/api/mocker/${m.id}`, {...omit(m, 'id')})\n    return res.data\n  } catch (err) {\n    console.error('update failed', err)\n    notifier.error('update failed', err.message)\n    return {};\n  }\n}\n\nexport async function createMocker(m: IMocker): Promise<IUpdateMockerRes> {\n  try {\n    const res = await axios.post(`${config.host}/api/mocker`, { ...m })\n    return res.data\n  } catch (err) {\n    console.error('create failed', err, JSON.stringify(err))\n    notifier.error('create failed', err.message)\n    return {};\n  }\n}\n\nexport async function deleteMocker(id: number): Promise<boolean> {\n  try {\n    await axios.delete(`${config.host}/api/mocker/${id}`)\n    return true;\n  } catch (err) {\n    console.error('delete failed', err, JSON.stringify(err))\n    notifier.error('delete failed', err.message)\n    return false;\n  }\n}","import React from 'react';\nimport styled from 'styled-components'\nimport { Typography, Card, Tag } from 'antd'\nimport { IMocker } from '../../interfaces/Mocker';\nimport HttpStatusCode from '../comm/HttpStatusCode';\nimport JSONBeautifier from '../comm/JSONBeautify';\nimport { EditOutlined, LoadingOutlined, DeleteOutlined } from '@ant-design/icons';\nimport { genToggleMockersAction, MockerDispatcher } from '../../store/mockers';\nimport { notifier } from '../../utils/notify';\n\ninterface Props {\n  mocker: IMocker;\n  mockerDispatcher: MockerDispatcher;\n  onEditBtnClick: (mockerId: number) => void\n  onDeleteBtnClick: (mockerId: number) => void\n}\n\nfunction MockerItem(props: Props) {\n  const { Text } = Typography;\n  const { mocker, mockerDispatcher } = props;\n  const toggleMockersAction = genToggleMockersAction(mockerDispatcher)\n  const desc = mocker.desc || 'This mockers doesn\\'t have any descriptions';\n\n  const mockerStatus = mocker.status === 'active'\n    ? <Text strong type='success'>Active</Text>\n    : mocker.status === 'inactive'\n      ? <Text>Inactive</Text>\n      : mocker.status === 'updating'\n        ? <LoadingOutlined style={{ fontSize: 13 }} spin />\n        : <Text type='danger'>unknown</Text>\n\n  return (\n    <Card \n      hoverable\n      bordered={false}\n      extra={(\n        <div\n          style={{padding: '4px 12px'}}\n          onClick={() => toggleMockersAction(mocker)}>\n          {mockerStatus}\n        </div>)}\n      title={`${mocker.reqMethod} ${mocker.prefix}`}\n      style={{\n        marginBottom: '24px',\n        opacity: mocker.status === 'active' ? 1 : '.5'\n      }}\n      actions={[\n        <span></span>,\n        <span></span>,\n        <span></span>,\n        <span></span>,\n        <span></span>,\n        <span></span>,\n        <DeleteOutlined key='delete' onClick={() => {\n          if (!mocker.id) {\n            notifier.warning('MockerId not found', '');\n            return;\n          }\n          props.onDeleteBtnClick(mocker.id)\n        }}/>,\n        <EditOutlined key=\"edit\" onClick={() => {\n          if (!mocker.id) {\n            notifier.warning('MockerId not found', '');\n            return;\n          }\n          props.onEditBtnClick(mocker.id);\n        }}/>,\n      ]}>\n      <MockerTagWrapper>\n        <MockerTag>\n          <HttpStatusCode code={mocker.resStatus} />\n        </MockerTag>\n        <MockerTag>\n          <Tag>Mocker</Tag>\n        </MockerTag>\n        <MockerTag>\n          <Tag>{`ID  ${mocker.id}`}</Tag>\n        </MockerTag>\n      </MockerTagWrapper>\n      <MockerItemResBody>\n        <JSONBeautifier jsonStr={mocker.resBody} />\n      </MockerItemResBody>\n      {desc.split('\\n').map((str, i) => (\n        <span key={i}>\n          <Text type=\"secondary\">{str}</Text>\n          <br/>\n        </span>\n      ))}\n    </Card>\n  );\n}\n\nconst MockerTagWrapper = styled.div`\n  display: flex;\n  width: 100%;\n`\n\nconst MockerTag = styled.span`\n  margin: 0 4px 0 0;\n`;\n\nconst MockerItemResBody = styled.div`\n  padding: 4px 0;\n`;\n\nexport default MockerItem;\n","import { Dispatch } from 'react';\nimport { listProxies } from '../api/proxies';\nimport { IProxy } from \"../interfaces/Proxy\";\n\nenum ProxiesActionType {\n  RefreshList,\n  UpdateProxy,\n  AddProxy,\n  RemoveProxy,\n}\n\ntype Action = {\n  type: ProxiesActionType.RefreshList;\n  payload: IProxy[];\n} | {\n  type: ProxiesActionType.UpdateProxy;\n  payload: IProxy;\n} | {\n  type: ProxiesActionType.AddProxy;\n  payload: IProxy;\n} | {\n  type: ProxiesActionType.RemoveProxy;\n  payload: { id: number }\n}\n\nexport type ProxyDispatcher = Dispatch<Action>\n\n// reducer create method\nexport function proxiesReducerInit(): IProxy[] {\n  return []\n}\n\nexport function proxiesReducer(origin: IProxy[], action: Action): IProxy[] {\n  switch (action.type) {\n    case ProxiesActionType.RefreshList:\n      if (!Array.isArray(action.payload)) {\n        return [];\n      }\n      return [...action.payload];\n    case ProxiesActionType.UpdateProxy:\n      return origin.map((m) => m.id === action.payload.id ? action.payload : m);\n    case ProxiesActionType.AddProxy:\n      return [action.payload, ...origin];\n    case ProxiesActionType.RemoveProxy:\n      return origin.filter((m) => m.id !== action.payload.id);\n    default:\n      throw new Error();\n  }\n}\n\n// operator methods\nexport function genRefreshProxiesAction(dispatch: ProxyDispatcher): () => Promise<void> {\n  return async () => {\n    const res = await listProxies();\n    dispatch({\n      type: ProxiesActionType.RefreshList,\n      payload: res.proxies\n    });\n  };\n}\n","import React from 'react'\nimport { IMocker, } from '../../interfaces/Mocker';\nimport MockerItem from './MockerItem';\nimport { MockerDispatcher } from '../../store/mockers';\n\ninterface Props {\n  mockers: IMocker[];\n  mockerDispatcher: MockerDispatcher;  \n  onEditBtnClick: (mockerId: number) => void;\n  onDeleteBtnClick: (mockerId: number) => void;\n}\n\nexport default function MockerList(props: Props) {\n  return (\n    <>\n      {props.mockers.map((m, i) => (\n        <MockerItem\n          key={i}\n          mocker={m}\n          onEditBtnClick={props.onEditBtnClick}\n          onDeleteBtnClick={props.onDeleteBtnClick}\n          mockerDispatcher={props.mockerDispatcher}/>\n      ))}\n    </>\n  )\n}\n","import axios from \"axios\";\nimport omit from 'lodash/omit'\nimport { notifier } from '../utils/notify'\nimport { config } from '../config';\nimport { IListProxyRes, IProxy, IUpdateProxyRes } from \"../interfaces/Proxy\";\n\nexport async function listProxies(): Promise<IListProxyRes> {\n  try {\n    const res = await axios.get(`${config.host}/api/proxy`)\n    return res.data\n  } catch (err) {\n    console.error(err);\n    notifier.error('list proxy failed', err.message)\n    return { proxies: [] };\n  }\n}\n\nexport async function updateProxy(p: IProxy): Promise<IUpdateProxyRes> {\n  try {\n    const res = await axios.put(`${config.host}/api/proxy/${p.id}`, { ...omit(p, 'id') })\n    return res.data\n  } catch (err) {\n    console.error('update proxy failed', err)\n    notifier.error('update proxy failed', err.message)\n    return {};\n  }\n}\n\nexport async function createProxy(p: IProxy): Promise<IUpdateProxyRes> {\n  try {\n    const res = await axios.post(`${config.host}/api/proxy`, { ...p })\n    return res.data\n  } catch (err) {\n    console.error('create proxy failed', err, JSON.stringify(err))\n    notifier.error('create proxy failed', err.message)\n    return {};\n  }\n}\n\nexport async function deleteProxy(id: number): Promise<boolean> {\n  try {\n    await axios.delete(`${config.host}/api/proxy/${id}`)\n    return true;\n  } catch (err) {\n    console.error('delete proxy failed', err, JSON.stringify(err))\n    notifier.error('delete proxy failed', err.message)\n    return false;\n  }\n}","import React from 'react';\nimport styled from 'styled-components'\nimport { Typography, Card, Tag } from 'antd'\nimport { IProxy } from '../../interfaces/Proxy';\nimport { EditOutlined, LoadingOutlined, DeleteOutlined } from '@ant-design/icons';\n\ninterface Props {\n  proxy: IProxy;\n}\n\nfunction ProxyItem(props: Props) {\n  const { Text } = Typography;\n  const { proxy } = props;\n  const desc = proxy.desc || 'This proxy doesn\\'t have any descriptions';\n\n  const proxyStatus = proxy.status === 'active'\n    ? <Text strong type='success'>Active</Text>\n    : proxy.status === 'inactive'\n      ? <Text>Inactive</Text>\n      : proxy.status === 'updating'\n        ? <LoadingOutlined style={{ fontSize: 13 }} spin />\n        : <Text type='danger'>unknown</Text>\n\n  return (\n    <Card\n      hoverable\n      bordered={false}\n      extra={(<div style={{ padding: '4px 12px' }}>{proxyStatus}</div>)}\n      title={`${proxy.reqMethod} ${proxy.prefix}`}\n      style={{\n        marginBottom: '24px',\n        opacity: proxy.status === 'active' ? 1 : '.5'\n      }}\n      actions={[\n        <span></span>,\n        <span></span>,\n        <span></span>,\n        <span></span>,\n        <span></span>,\n        <span></span>,\n        <DeleteOutlined key='delete' disabled />,\n        <EditOutlined key=\"edit\" disabled />,\n      ]}>\n      <ProxyTagWrapper>\n        <ProxyTag>\n          <Tag>Proxy</Tag>\n        </ProxyTag>\n        <ProxyTag>\n          <Tag>{`ID  ${proxy.id}`}</Tag>\n        </ProxyTag>\n      </ProxyTagWrapper>\n      {desc.split('\\n').map((str, i) => (\n        <span key={i}>\n          <Text type=\"secondary\">{str}</Text>\n          <br />\n        </span>\n      ))}\n    </Card>\n  );\n}\n\nconst ProxyTagWrapper = styled.div`\n  display: flex;\n  width: 100%;\n`\n\nconst ProxyTag = styled.span`\n  margin: 0 4px 0 0;\n`;\n\nexport default ProxyItem;\n","import React from 'react'\nimport { IProxy, } from '../../interfaces/Proxy';\nimport ProxyItem from './ProxyItem';\n\ninterface Props {\n  proxies: IProxy[];\n}\n\nexport default function ProxyList(props: Props) {\n  return (\n    <>\n      {props.proxies.map((p, i) => (\n        <ProxyItem key={i} proxy={p} />\n      ))}\n    </>\n  )\n}\n","import React, { useEffect, useReducer, useState } from 'react';\nimport styled from 'styled-components'\nimport { PlusOutlined, RedoOutlined } from '@ant-design/icons';\nimport { Button, Divider, Row, Col } from 'antd'\nimport PageHeader from '../components/comm/PageHeader';\nimport MockerForm from '../components/mockers/MockerForm';\nimport MockerList from '../components/mockers/MockerList';\nimport { \n  genCreateMockersAction,\n  genDeleteMockersAction,\n  genRefreshMockersAction,\n  genUpdateMockersAction,\n  mockersReducer,\n  mockersReducerInit\n} from '../store/mockers';\nimport { IMocker } from '../interfaces/Mocker';\nimport { notifier } from '../utils/notify';\nimport { genRefreshProxiesAction, proxiesReducer, proxiesReducerInit } from '../store/proxies';\nimport ProxyList from '../components/proxies/ProxyList';\n\nconst DefaultMocker: IMocker = {\n  prefix: '', \n  reqMethod: 'GET',\n  resStatus: 200,\n  resBody: '',\n  desc: '',\n  createBy: 'AndrewChen',\n  status: 'active'\n}\n\ntype MockerFormState = {\n  visible: false;\n} |{\n  visible: true;\n  action: 'toCreate';\n} | {\n  visible: true;\n  action: 'toUpdate';\n  data: IMocker\n}\n\nfunction ProxyAndMockersPage() {\n  const [mockers, mockerDispatcher] = useReducer(mockersReducer, [], mockersReducerInit);\n  const [proxies, proxyDispatcher] = useReducer(proxiesReducer, [], proxiesReducerInit);\n  const [listLoading, setListLoading] = useState(false);\n  const refreshProxyAction = genRefreshProxiesAction(proxyDispatcher);\n  const refreshMockerAction = genRefreshMockersAction(mockerDispatcher);\n  const createMocker = genCreateMockersAction(mockerDispatcher);\n  const updateMocker = genUpdateMockersAction(mockerDispatcher);\n  const deleteMocker = genDeleteMockersAction(mockerDispatcher);\n  const [mockerFormState, setMockerFormState] = useState<MockerFormState>({ visible: false });\n\n\n  useEffect(() => {\n    if (mockers.length === 0) {\n      setListLoading(true)\n      setTimeout(() => { \n        refreshMockerAction()\n        refreshProxyAction()\n        setListLoading(false)\n      }, 800)\n    }\n  }, [mockers.length, refreshMockerAction, refreshProxyAction]);\n\n\n  return (\n    <Container>\n      <PageHeader title='Proxy & Mockers'/>\n      <ControlPanel>\n        <Button\n          type='primary'\n          shape='circle'\n          icon={<PlusOutlined />}\n          onClick={() => setMockerFormState({ visible: true, action: 'toCreate' })}>\n        </Button>\n        <Button\n          shape='circle'\n          loading={listLoading}\n          icon={<RedoOutlined />}\n          onClick={async () => {\n            setListLoading(true)\n            await refreshMockerAction();\n            await refreshProxyAction();\n            setTimeout(() => setListLoading(false), 650);\n          }}>\n        </Button>\n      </ControlPanel>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Divider orientation=\"left\">Mockers</Divider>\n          <MockerList\n            mockers={mockers}\n            onDeleteBtnClick={deleteMocker}\n            onEditBtnClick={(mockerId: number) => {\n              const target = mockers.find((m) => m.id === mockerId)\n              if (!target) {\n                notifier.warning('Start editor failed', `Mocker ${mockerId} not found`);\n                return;\n              }\n              setMockerFormState({\n                visible: true,\n                action: 'toUpdate',\n                data: target\n              })\n            }}\n            mockerDispatcher={mockerDispatcher}/>\n        </Col>\n      </Row>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Divider orientation=\"left\">Proxies</Divider>\n          <ProxyList proxies={proxies}/>\n        </Col>\n      </Row>\n      {mockerFormState.visible && (\n        <MockerForm\n          action={mockerFormState.action}\n          visible={mockerFormState.visible}\n          data={(\n            mockerFormState.action === 'toUpdate' ? mockerFormState.data : { ...DefaultMocker }\n          )}\n          onClose={() => setMockerFormState({ visible: false })}\n          onComplete={async (data) => {\n            let success: boolean = false;\n            if (mockerFormState.action === 'toCreate') {\n              success = await createMocker({\n                prefix: data.prefix,\n                reqMethod: data.reqMethod,\n                resStatus: data.resStatus,\n                resBody: data.resBody,\n                desc: data.desc,\n                createBy: data.createBy,\n                status: data.status\n              });\n            }\n            else if (mockerFormState.action === 'toUpdate') {\n              success = await updateMocker({\n                id: data.id,\n                prefix: data.prefix,\n                reqMethod: data.reqMethod,\n                resStatus: data.resStatus,\n                resBody: data.resBody,\n                desc: data.desc,\n                createBy: data.createBy,\n                status: data.status\n              });\n            }\n            if (success) {\n              setMockerFormState({ visible: false })\n            }\n          }}\n        />\n      )}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  padding: 0 0 0 24px;\n`;\n\nconst ControlPanel = styled.div`\n  display: flex;\n  width: 200px;\n  justify-content: flex-start;\n\n  > * {\n    margin-right: 12px;\n  }\n`;\n\nexport default ProxyAndMockersPage;\n","import React from 'react';\nimport styled from 'styled-components'\nimport { Layout } from 'antd';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Menu from './components/comm/Menu';\nimport NavBar from './components/comm/NavBar';\nimport HomePage from './pages/DocumentPage';\nimport ProxyAndMockersPage from './pages/ProxyAndMockersPage';\nimport './App.css';\n\n\nfunction App() {\n  const {Sider, Content, Footer} = Layout\n  return (\n    <Container className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/admin\">\n            <HomePage />\n          </Route>\n          <Route path=\"/\">\n            <Layout>\n              <NavBar />\n              <Layout>\n                <Sider width={256}>\n                  <Menu />\n                </Sider>\n                <Content>\n                  <Switch>\n                    <Route exact path=\"/admin/routes\">\n                      <ProxyAndMockersPage />\n                    </Route>\n                  </Switch>\n                  <Footer>Made by AndrewChen</Footer>\n                </Content>\n              </Layout>\n            </Layout>\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  padding: 0;\n  margin: 0;\n  font-size: .9em;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\" !important; // ??\n`;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}